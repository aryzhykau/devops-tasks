name: Build and Push Docker to ECR

on:
  push:
    paths:
      - 'todo-bot/**'           
    branches:
      - main               

env:
  AWS_REGION: eu-central-1    
  ECR_REPOSITORY: devops-bot
  ECS_SERVICE: ecs_service
  ECS_CLUSTER: foo
  ECS_TASK_DEFINITION: ecs_task
  TF_WORKING_DIR: infra/modules/ecs_task

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init

    - name: Deregister current task definition
      run: |
        
        TASK_DEFS=$(aws ecs list-task-definitions \
          --family-prefix $ECS_TASK_DEFINITION \
          --status ACTIVE \
          --query 'taskDefinitionArns' \
          --output text)
        
        
        for TASK_DEF in $TASK_DEFS; do
          aws ecs deregister-task-definition \
            --task-definition $TASK_DEF
        done

    - name: Terraform Apply with new image tag
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform apply \
          -var="task_image_tag=${{ steps.build-image.outputs.image_tag }}" \
          -auto-approve

    - name: Force ECS service deployment
      run: |
        
        LATEST_TASK_DEF=$(aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
      
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition $LATEST_TASK_DEF \
          --force-new-deployment
